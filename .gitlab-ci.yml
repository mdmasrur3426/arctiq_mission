stages:
  - test
  - build
  - deploy staging

variables:
  GCP_PROJECT_NAME: arctiq-mission-masrur
  # $GKE_NAMESPACE: arctiq-mission
  IMAGE_TAG: $CI_REGISTRY_IMAGE/arctiq-image:$CI_COMMIT_REF_SLUG
  GKE_CLUSTER_NAME: primary


lint_test:
  image: python:3.8.0-slim
  stage: test
  before_script:
    - pip3 install flake8==4.0.1
    - pip3 install flake8-html==0.4.1 Jinja2==3.0
  script:
    - flake8 --format=html --htmldir=flake8_reports/
  artifacts:
    when: always
    paths:
      - flake8_reports/

# pytest:
#   image: python:3.8.0-slim
#   stage: test
#   before_script:
#     - pip install pytest-html
#     - pip install -r requirements.txt
#   script:
#     - pytest --html=pytest_reports/pytest-report.html --self-contained-html
#   artifacts:
#     when: always
#     paths:
#       - pytest_reports/

build:
  image: docker:latest
  services:
    - docker:dind
  stage: build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_TAG .
    - docker images
    - docker push $IMAGE_TAG

# deploy_stage:
#   image: google/cloud-sdk
#   stage: deploy staging
#   before_script:
#    - echo "$SERVICE_ACCOUNT_KEY" > key.json
#    - gcloud auth activate-service-account --key-file=key.json
#    - gcloud config set project $GCP_PROJECT_NAME
#    - gcloud config set container/cluster $GKE_CLUSTER_NAME
#    - gcloud config set compute/zone us-central1-a
#   script:
#     - gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone us-central1-a --project $GCP_PROJECT_NAME
#     - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
#     - kubectl create secret generic service-account-credentials --from-file=key.json=/secrets/credentials.json
#     - kubectl apply -f deployment.yaml 
